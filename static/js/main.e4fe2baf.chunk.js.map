{"version":3,"sources":["component/LineChart.jsx","component/BarChart.jsx","component/DashBoardCard.jsx","component/LocalDashboard.jsx","component/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Linecharts","props","state","Data","axios","get","then","res","stats","data","Confirmed","Active","Death","Recovered","Date","forEach","record","push","Deaths","split","setState","labels","datasets","label","borderColor","backgroundColor","spanGaps","borderWidth","Fragment","className","height","this","options","maintainAspectRatio","responsive","Component","DashBoardCard","style","cardTitle","count","LocalDashboard","dashboardData","role","data-aos","data-aos-duration","update_date_time","class","aria-hidden","local_new_cases","local_total_cases","local_active_cases","local_new_deaths","local_deaths","local_total_number_of_individuals_in_hospitals","local_recovered","Dashboard","useState","dashboard","hospitalData","setStats","useEffect","fetch","response","json","success","hospital_data","catch","console","log","length","marginTop","width","App","LineChart","BarChart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e4fe2baf.chunk.js","sourcesContent":["import React, { Component} from 'react'\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport class Linecharts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Data: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get(`https://api.covid19api.com/live/country/sri-lanka/status/confirmed`)\r\n      .then(res => {\r\n        const stats = res.data;\r\n        let Confirmed = [];\r\n        let Active = [];\r\n        let Death = [];\r\n        let Recovered = [];\r\n        let Date = [];\r\n        stats.forEach(record => {\r\n          Confirmed.push(record.Confirmed);\r\n          Active.push(record.Active);\r\n          Death.push(record.Deaths);\r\n          Recovered.push(record.Recovered);\r\n          Date.push(record.Date.split(\"T\")[0]);\r\n        });\r\n        this.setState({\r\n          Data: {\r\n            labels: Date,\r\n            datasets: [\r\n              {\r\n                label: 'Confirmed',\r\n                data: Confirmed,\r\n              borderColor: '#ffc107',\r\n              backgroundColor: 'transparent',\r\n              spanGaps: true,\r\n              borderWidth: 2\r\n              },\r\n              {\r\n                label: 'Active',\r\n                data: Active,\r\n              borderColor: '#17a2b8',\r\n              backgroundColor: 'transparent',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              },\r\n              {\r\n                label: 'Death',\r\n                data: Death,\r\n              borderColor: '#dc3545',\r\n              backgroundColor: 'transparent',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              },\r\n              {\r\n                label: 'Recovered',\r\n                data: Recovered,\r\n              borderColor: '#28a745',\r\n              backgroundColor: 'transparent',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"d-none d-md-block\">\r\n      <Line height={150}\r\n      data = {\r\n        this.state.Data\r\n      }\r\n      options = {\r\n        {\r\n          maintainAspectRatio: true,\r\n          responsive: true\r\n        }\r\n      }\r\n      />\r\n      </div>\r\n      <div className=\"d-block d-sm-none\">\r\n      <Line height={300}\r\n      data = {\r\n        this.state.Data\r\n      }\r\n      options = {\r\n        {\r\n          maintainAspectRatio: true,\r\n          responsive: true\r\n        }\r\n      }\r\n      />\r\n      </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Linecharts","import React, { Component} from 'react'\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nexport class Linecharts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Data: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get(`https://api.covid19api.com/live/country/sri-lanka/status/confirmed`)\r\n      .then(res => {\r\n        const stats = res.data;\r\n        let Confirmed = [];\r\n        let Active = [];\r\n        let Death = [];\r\n        let Recovered = [];\r\n        let Date = [];\r\n        stats.forEach(record => {\r\n          Confirmed.push(record.Confirmed);\r\n          Active.push(record.Active);\r\n          Death.push(record.Deaths);\r\n          Recovered.push(record.Recovered);\r\n          Date.push(record.Date.split(\"T\")[0]);\r\n        });\r\n        this.setState({\r\n          Data: {\r\n            labels: Date,\r\n            datasets: [\r\n              {\r\n                label: 'Confirmed',\r\n                data: Confirmed,\r\n              borderColor: '#ffc107',\r\n              backgroundColor: '#ffc107',\r\n              spanGaps: true,\r\n              borderWidth: 2\r\n              },\r\n              {\r\n                label: 'Active',\r\n                data: Active,\r\n              borderColor: '#17a2b8',\r\n              backgroundColor: '#17a2b8',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              },\r\n              {\r\n                label: 'Deaths',\r\n                data: Death,\r\n              borderColor: '#dc3545',\r\n              backgroundColor: '#dc3545',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              },\r\n              {\r\n                label: 'Recovered',\r\n                data: Recovered,\r\n              borderColor: '#28a745',\r\n              backgroundColor: '#28a745',\r\n              spanGaps: true,\r\n              borderWidth: 2,\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"d-none d-md-block\">\r\n      <Bar height={150}\r\n      data = {\r\n        this.state.Data\r\n      }\r\n      options = {\r\n        {\r\n          maintainAspectRatio: true,\r\n          responsive: true\r\n        }\r\n      }\r\n      />\r\n      </div>\r\n      <div className=\"d-block d-sm-none\">\r\n      <Bar height={300}\r\n      data = {\r\n        this.state.Data\r\n      }\r\n      options = {\r\n        {\r\n          maintainAspectRatio: true,\r\n          responsive: true\r\n        }\r\n      }\r\n      />\r\n      </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Linecharts","import React from 'react'\r\n\r\nfunction DashBoardCard(props){\r\n    return(\r\n        <React.Fragment>\r\n                <p className=\"p-3 text-center fw-6\" style={{backgroundColor: \"white\"}}>{props.cardTitle}</p>\r\n                <p className={\"bg-transparent text-center align-middle fw-7 text-font\"}>{props.count}</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DashBoardCard","import React  from 'react'\r\n\r\nimport DashboardCard from './DashBoardCard'\r\n\r\nconst LocalDashboard = ({ dashboardData }) => {\r\n        return(\r\n          <div className=\"container mt-3\">\r\n              <div className=\"alert alert-danger main-heading p-3\" role=\"alert\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                 <h2>Local Information</h2>\r\n                 <p>Last Updated: {dashboardData.update_date_time}</p>\r\n              </div>\r\n              <div className=\"container d-gap\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-hospital-o text-primary\" aria-hidden=\"true\"></i>\r\n                  <DashboardCard \r\n                      count={dashboardData.local_new_cases}\r\n                      cardTitle=\"New Cases\"\r\n                      \r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-user-md text-warning\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_total_cases}\r\n                      cardTitle=\"Total Cases\"\r\n\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-ambulance text-info\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_active_cases}\r\n                      cardTitle=\"Active\"\r\n                    />\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-bed text-danger\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_new_deaths}\r\n                      cardTitle=\"New Deaths\"\r\n                    />\r\n                </div>\r\n                </div>\r\n                </div>\r\n        <div className=\"row d-gap\">\r\n                    <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-exclamation-triangle text-danger\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_deaths}\r\n                      cardTitle=\"Total Deaths\"\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-medkit text-warning\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_total_number_of_individuals_in_hospitals}\r\n                      cardTitle=\"Admitted\"\r\n\r\n                    />\r\n                </div>\r\n                </div>\r\n                <div className=\"col-md-3 col-sm-4 col-6 np-5 np\" data-aos=\"fade-up\" data-aos-duration=\"1200\">\r\n                  <div className=\"my-3 text-center shadow\" style={{backgroundColor: '#fff'}}>\r\n                  <i class=\"fa fa-plus-square text-success\" aria-hidden=\"true\"></i>\r\n                    <DashboardCard \r\n                      count={dashboardData.local_recovered}\r\n                      cardTitle=\"Recovered\"\r\n                    />\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n              </div>\r\n        )\r\n    }\r\n\r\nexport default LocalDashboard ","import React, { useState, useEffect } from 'react'\r\nimport LocalDashBoard from './LocalDashboard'\r\n\r\nfunction Dashboard (){\r\nconst [stats, setStats] = useState({ dashboard: {}, hospitalData: [] });\r\n\r\nuseEffect(() => {\r\nfetch('https://hpb.health.gov.lk/api/get-current-statistical')\r\n.then(response => response.json())\r\n.then(response => {\r\nif (response.success === true) {\r\nsetStats({\r\ndashboard: response.data,\r\nhospitalData: response.data.hospital_data\r\n});\r\n}\r\n})\r\n.catch(() => console.log('Something went wrong...'));\r\n}, []);\r\n\r\n\r\nconst Dashboard = () => {\r\nreturn(\r\n<React.Fragment>\r\n    <div className=\"container\">\r\n    <LocalDashBoard dashboardData={stats.dashboard} />\r\n    </div>\r\n</React.Fragment>\r\n)\r\n}\r\nreturn(\r\n<React.Fragment>\r\n                {stats.hospitalData.length > 0 ? (\r\n                Dashboard()\r\n                ): (\r\n                    <div className=\"container text-center\">\r\n                <div className=\"spinner-grow\" style={{marginTop: 150, width: 250, height: 250}} role=\"status\">\r\n                <span className=\"sr-only\">Fetching Data...</span>\r\n              </div>\r\n                    </div>\r\n                )}\r\n</React.Fragment>\r\n)\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';   \nimport LineChart from './component/LineChart'\nimport BarChart from './component/BarChart'\nimport  Dashboard from './component/Dashboard'\nimport './App.css'\n\nfunction App() {  \n  return (  \n    <div className=\"container\"> \n        <Dashboard />\n        <div className=\"p-5\"></div>\n        <LineChart />\n        <div className=\"p-5\"></div>\n        <BarChart />\n    </div>  \n  );  \n}  \nexport default App;  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';  \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}